<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="26144"><g><title>`0x7FFE4CF3CC70 (3 samples, 0.01%)</title><rect x="0.0000%" y="533" width="0.0115%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="543.50"></text></g><g><title>`0x7FFE4CF50128 (3 samples, 0.01%)</title><rect x="0.0153%" y="453" width="0.0115%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="3"/><text x="0.2653%" y="463.50"></text></g><g><title>`0x7FFE4CF3D79A (7 samples, 0.03%)</title><rect x="0.0153%" y="501" width="0.0268%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="7"/><text x="0.2653%" y="511.50"></text></g><g><title>`0x7FFE4CF53720 (7 samples, 0.03%)</title><rect x="0.0153%" y="485" width="0.0268%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="7"/><text x="0.2653%" y="495.50"></text></g><g><title>`0x7FFE4CF500D3 (7 samples, 0.03%)</title><rect x="0.0153%" y="469" width="0.0268%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="7"/><text x="0.2653%" y="479.50"></text></g><g><title>`0x7FFE4CF50160 (4 samples, 0.02%)</title><rect x="0.0268%" y="453" width="0.0153%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="4"/><text x="0.2768%" y="463.50"></text></g><g><title>`0x7FFE4CF0FB53 (7 samples, 0.03%)</title><rect x="0.0459%" y="373" width="0.0268%" height="15" fill="rgb(207,160,47)" fg:x="12" fg:w="7"/><text x="0.2959%" y="383.50"></text></g><g><title>`0x7FFE4CF5020F (7 samples, 0.03%)</title><rect x="0.0459%" y="357" width="0.0268%" height="15" fill="rgb(228,23,34)" fg:x="12" fg:w="7"/><text x="0.2959%" y="367.50"></text></g><g><title>`0x7FFE4CF50F70 (5 samples, 0.02%)</title><rect x="0.0535%" y="341" width="0.0191%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="5"/><text x="0.3035%" y="351.50"></text></g><g><title>`0x7FFE4CF51243 (4 samples, 0.02%)</title><rect x="0.0574%" y="325" width="0.0153%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="4"/><text x="0.3074%" y="335.50"></text></g><g><title>`0x7FFE4CF04C14 (3 samples, 0.01%)</title><rect x="0.0612%" y="309" width="0.0115%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="3"/><text x="0.3112%" y="319.50"></text></g><g><title>`0x7FFE4AD905A2 (9 samples, 0.03%)</title><rect x="0.0459%" y="469" width="0.0344%" height="15" fill="rgb(240,193,28)" fg:x="12" fg:w="9"/><text x="0.2959%" y="479.50"></text></g><g><title>`0x7FFE4AD919C7 (9 samples, 0.03%)</title><rect x="0.0459%" y="453" width="0.0344%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="9"/><text x="0.2959%" y="463.50"></text></g><g><title>`0x7FFE4AD8C050 (9 samples, 0.03%)</title><rect x="0.0459%" y="437" width="0.0344%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="9"/><text x="0.2959%" y="447.50"></text></g><g><title>`0x7FFE4A772612 (9 samples, 0.03%)</title><rect x="0.0459%" y="421" width="0.0344%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="9"/><text x="0.2959%" y="431.50"></text></g><g><title>`0x7FFE4CF06AF4 (9 samples, 0.03%)</title><rect x="0.0459%" y="405" width="0.0344%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="9"/><text x="0.2959%" y="415.50"></text></g><g><title>`0x7FFE4CF073E4 (9 samples, 0.03%)</title><rect x="0.0459%" y="389" width="0.0344%" height="15" fill="rgb(225,20,46)" fg:x="12" fg:w="9"/><text x="0.2959%" y="399.50"></text></g><g><title>`0x7FFE4AD9045F (10 samples, 0.04%)</title><rect x="0.0459%" y="485" width="0.0382%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="10"/><text x="0.2959%" y="495.50"></text></g><g><title>`0x7FFE466A1BCE (13 samples, 0.05%)</title><rect x="0.0994%" y="277" width="0.0497%" height="15" fill="rgb(221,200,47)" fg:x="26" fg:w="13"/><text x="0.3494%" y="287.50"></text></g><g><title>`0x7FFE466A1BD3 (3 samples, 0.01%)</title><rect x="0.1492%" y="277" width="0.0115%" height="15" fill="rgb(226,26,5)" fg:x="39" fg:w="3"/><text x="0.3992%" y="287.50"></text></g><g><title>`0x7FFE466A1BDB (16 samples, 0.06%)</title><rect x="0.1606%" y="277" width="0.0612%" height="15" fill="rgb(249,33,26)" fg:x="42" fg:w="16"/><text x="0.4106%" y="287.50"></text></g><g><title>`0x7FFE466A1BE3 (3 samples, 0.01%)</title><rect x="0.2218%" y="277" width="0.0115%" height="15" fill="rgb(235,183,28)" fg:x="58" fg:w="3"/><text x="0.4718%" y="287.50"></text></g><g><title>`0x7FFE466A1BEB (3 samples, 0.01%)</title><rect x="0.2333%" y="277" width="0.0115%" height="15" fill="rgb(221,5,38)" fg:x="61" fg:w="3"/><text x="0.4833%" y="287.50"></text></g><g><title>test.exe`alloc::vec::from_elem (43 samples, 0.16%)</title><rect x="0.0880%" y="309" width="0.1645%" height="15" fill="rgb(247,18,42)" fg:x="23" fg:w="43"/><text x="0.3380%" y="319.50"></text></g><g><title>test.exe`alloc::vec::spec_from_elem::impl$3::from_elem (43 samples, 0.16%)</title><rect x="0.0880%" y="293" width="0.1645%" height="15" fill="rgb(241,131,45)" fg:x="23" fg:w="43"/><text x="0.3380%" y="303.50"></text></g><g><title>`0x7FFE4CF94513 (30 samples, 0.11%)</title><rect x="0.2524%" y="37" width="0.1147%" height="15" fill="rgb(249,31,29)" fg:x="66" fg:w="30"/><text x="0.5024%" y="47.50"></text></g><g><title>`0x7FFE4CF127D9 (42 samples, 0.16%)</title><rect x="0.2524%" y="53" width="0.1606%" height="15" fill="rgb(225,111,53)" fg:x="66" fg:w="42"/><text x="0.5024%" y="63.50"></text></g><g><title>`0x7FFE4CF94517 (12 samples, 0.05%)</title><rect x="0.3672%" y="37" width="0.0459%" height="15" fill="rgb(238,160,17)" fg:x="96" fg:w="12"/><text x="0.6172%" y="47.50"></text></g><g><title>test.exe`alloc::vec::impl$19::extend(alloc::vec::Vec (43 samples, 0.16%)</title><rect x="0.2524%" y="309" width="0.1645%" height="15" fill="rgb(214,148,48)" fg:x="66" fg:w="43"/><text x="0.5024%" y="319.50"></text></g><g><title>test.exe`alloc::vec::spec_extend::impl$1::spec_extend(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::array::iter::IntoIter (43 samples, 0.16%)</title><rect x="0.2524%" y="293" width="0.1645%" height="15" fill="rgb(232,36,49)" fg:x="66" fg:w="43"/><text x="0.5024%" y="303.50"></text></g><g><title>test.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::extend_trusted(core::array::iter::IntoIter (43 samples, 0.16%)</title><rect x="0.2524%" y="277" width="0.1645%" height="15" fill="rgb(209,103,24)" fg:x="66" fg:w="43"/><text x="0.5024%" y="287.50"></text></g><g><title>test.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::as_mut_ptr (43 samples, 0.16%)</title><rect x="0.2524%" y="261" width="0.1645%" height="15" fill="rgb(229,88,8)" fg:x="66" fg:w="43"/><text x="0.5024%" y="271.50"></text></g><g><title>test.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::ptr (43 samples, 0.16%)</title><rect x="0.2524%" y="245" width="0.1645%" height="15" fill="rgb(213,181,19)" fg:x="66" fg:w="43"/><text x="0.5024%" y="255.50"></text></g><g><title>test.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (43 samples, 0.16%)</title><rect x="0.2524%" y="229" width="0.1645%" height="15" fill="rgb(254,191,54)" fg:x="66" fg:w="43"/><text x="0.5024%" y="239.50"></text></g><g><title>test.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (43 samples, 0.16%)</title><rect x="0.2524%" y="213" width="0.1645%" height="15" fill="rgb(241,83,37)" fg:x="66" fg:w="43"/><text x="0.5024%" y="223.50"></text></g><g><title>test.exe`alloc::raw_vec::impl$5::reserve::do_reserve_and_handle&lt;alloc::alloc::Global&gt;(alloc::raw_vec::RawVecInner (43 samples, 0.16%)</title><rect x="0.2524%" y="197" width="0.1645%" height="15" fill="rgb(233,36,39)" fg:x="66" fg:w="43"/><text x="0.5024%" y="207.50"></text></g><g><title>test.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (43 samples, 0.16%)</title><rect x="0.2524%" y="181" width="0.1645%" height="15" fill="rgb(226,3,54)" fg:x="66" fg:w="43"/><text x="0.5024%" y="191.50"></text></g><g><title>test.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (43 samples, 0.16%)</title><rect x="0.2524%" y="165" width="0.1645%" height="15" fill="rgb(245,192,40)" fg:x="66" fg:w="43"/><text x="0.5024%" y="175.50"></text></g><g><title>test.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (43 samples, 0.16%)</title><rect x="0.2524%" y="149" width="0.1645%" height="15" fill="rgb(238,167,29)" fg:x="66" fg:w="43"/><text x="0.5024%" y="159.50"></text></g><g><title>test.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (43 samples, 0.16%)</title><rect x="0.2524%" y="133" width="0.1645%" height="15" fill="rgb(232,182,51)" fg:x="66" fg:w="43"/><text x="0.5024%" y="143.50"></text></g><g><title>test.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (43 samples, 0.16%)</title><rect x="0.2524%" y="117" width="0.1645%" height="15" fill="rgb(231,60,39)" fg:x="66" fg:w="43"/><text x="0.5024%" y="127.50"></text></g><g><title>test.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (43 samples, 0.16%)</title><rect x="0.2524%" y="101" width="0.1645%" height="15" fill="rgb(208,69,12)" fg:x="66" fg:w="43"/><text x="0.5024%" y="111.50"></text></g><g><title>`0x7FFE4CF136BD (43 samples, 0.16%)</title><rect x="0.2524%" y="85" width="0.1645%" height="15" fill="rgb(235,93,37)" fg:x="66" fg:w="43"/><text x="0.5024%" y="95.50"></text></g><g><title>`0x7FFE4CF138E3 (43 samples, 0.16%)</title><rect x="0.2524%" y="69" width="0.1645%" height="15" fill="rgb(213,116,39)" fg:x="66" fg:w="43"/><text x="0.5024%" y="79.50"></text></g><g><title>`0x7FFE466A13FA (128 samples, 0.49%)</title><rect x="4.6741%" y="277" width="0.4896%" height="15" fill="rgb(222,207,29)" fg:x="1222" fg:w="128"/><text x="4.9241%" y="287.50"></text></g><g><title>`0x7FFE466A13FE (144 samples, 0.55%)</title><rect x="5.1637%" y="277" width="0.5508%" height="15" fill="rgb(206,96,30)" fg:x="1350" fg:w="144"/><text x="5.4137%" y="287.50"></text></g><g><title>`0x7FFE466A1514 (131 samples, 0.50%)</title><rect x="5.7183%" y="277" width="0.5011%" height="15" fill="rgb(218,138,4)" fg:x="1495" fg:w="131"/><text x="5.9683%" y="287.50"></text></g><g><title>`0x7FFE466A152D (11 samples, 0.04%)</title><rect x="6.2194%" y="277" width="0.0421%" height="15" fill="rgb(250,191,14)" fg:x="1626" fg:w="11"/><text x="6.4694%" y="287.50"></text></g><g><title>`0x7FFE466A1531 (92 samples, 0.35%)</title><rect x="6.2615%" y="277" width="0.3519%" height="15" fill="rgb(239,60,40)" fg:x="1637" fg:w="92"/><text x="6.5115%" y="287.50"></text></g><g><title>`0x7FFE466A1534 (39 samples, 0.15%)</title><rect x="6.6134%" y="277" width="0.1492%" height="15" fill="rgb(206,27,48)" fg:x="1729" fg:w="39"/><text x="6.8634%" y="287.50"></text></g><g><title>`0x7FFE466A1538 (248 samples, 0.95%)</title><rect x="6.7625%" y="277" width="0.9486%" height="15" fill="rgb(225,35,8)" fg:x="1768" fg:w="248"/><text x="7.0125%" y="287.50"></text></g><g><title>`0x7FFE466A153B (275 samples, 1.05%)</title><rect x="7.7111%" y="277" width="1.0519%" height="15" fill="rgb(250,213,24)" fg:x="2016" fg:w="275"/><text x="7.9611%" y="287.50"></text></g><g><title>`0x7FFE466A1548 (329 samples, 1.26%)</title><rect x="8.7707%" y="277" width="1.2584%" height="15" fill="rgb(247,123,22)" fg:x="2293" fg:w="329"/><text x="9.0207%" y="287.50"></text></g><g><title>`0x7FFE466A154E (160 samples, 0.61%)</title><rect x="10.0291%" y="277" width="0.6120%" height="15" fill="rgb(231,138,38)" fg:x="2622" fg:w="160"/><text x="10.2791%" y="287.50"></text></g><g><title>`0x7FFE466A1571 (264 samples, 1.01%)</title><rect x="10.6411%" y="277" width="1.0098%" height="15" fill="rgb(231,145,46)" fg:x="2782" fg:w="264"/><text x="10.8911%" y="287.50"></text></g><g><title>`0x7FFE466A1578 (285 samples, 1.09%)</title><rect x="11.6509%" y="277" width="1.0901%" height="15" fill="rgb(251,118,11)" fg:x="3046" fg:w="285"/><text x="11.9009%" y="287.50"></text></g><g><title>`0x7FFE466A1599 (142 samples, 0.54%)</title><rect x="12.7448%" y="277" width="0.5431%" height="15" fill="rgb(217,147,25)" fg:x="3332" fg:w="142"/><text x="12.9948%" y="287.50"></text></g><g><title>`0x7FFE466A165F (756 samples, 2.89%)</title><rect x="13.2918%" y="277" width="2.8917%" height="15" fill="rgb(247,81,37)" fg:x="3475" fg:w="756"/><text x="13.5418%" y="287.50">`0..</text></g><g><title>`0x7FFE466A1665 (161 samples, 0.62%)</title><rect x="16.1834%" y="277" width="0.6158%" height="15" fill="rgb(209,12,38)" fg:x="4231" fg:w="161"/><text x="16.4334%" y="287.50"></text></g><g><title>`0x7FFE466A1683 (147 samples, 0.56%)</title><rect x="16.7993%" y="277" width="0.5623%" height="15" fill="rgb(227,1,9)" fg:x="4392" fg:w="147"/><text x="17.0493%" y="287.50"></text></g><g><title>`0x7FFE466A168D (151 samples, 0.58%)</title><rect x="17.3615%" y="277" width="0.5776%" height="15" fill="rgb(248,47,43)" fg:x="4539" fg:w="151"/><text x="17.6115%" y="287.50"></text></g><g><title>`0x7FFE466A1697 (126 samples, 0.48%)</title><rect x="17.9391%" y="277" width="0.4819%" height="15" fill="rgb(221,10,30)" fg:x="4690" fg:w="126"/><text x="18.1891%" y="287.50"></text></g><g><title>`0x7FFE466A16A1 (136 samples, 0.52%)</title><rect x="18.4211%" y="277" width="0.5202%" height="15" fill="rgb(210,229,1)" fg:x="4816" fg:w="136"/><text x="18.6711%" y="287.50"></text></g><g><title>`0x7FFE466A16AB (162 samples, 0.62%)</title><rect x="18.9412%" y="277" width="0.6196%" height="15" fill="rgb(222,148,37)" fg:x="4952" fg:w="162"/><text x="19.1912%" y="287.50"></text></g><g><title>`0x7FFE466A16B5 (150 samples, 0.57%)</title><rect x="19.5609%" y="277" width="0.5737%" height="15" fill="rgb(234,67,33)" fg:x="5114" fg:w="150"/><text x="19.8109%" y="287.50"></text></g><g><title>`0x7FFE466A16BC (146 samples, 0.56%)</title><rect x="20.1346%" y="277" width="0.5584%" height="15" fill="rgb(247,98,35)" fg:x="5264" fg:w="146"/><text x="20.3846%" y="287.50"></text></g><g><title>`0x7FFE466A16C3 (145 samples, 0.55%)</title><rect x="20.6931%" y="277" width="0.5546%" height="15" fill="rgb(247,138,52)" fg:x="5410" fg:w="145"/><text x="20.9431%" y="287.50"></text></g><g><title>`0x7FFE466A16CA (152 samples, 0.58%)</title><rect x="21.2477%" y="277" width="0.5814%" height="15" fill="rgb(213,79,30)" fg:x="5555" fg:w="152"/><text x="21.4977%" y="287.50"></text></g><g><title>`0x7FFE466A16D1 (143 samples, 0.55%)</title><rect x="21.8291%" y="277" width="0.5470%" height="15" fill="rgb(246,177,23)" fg:x="5707" fg:w="143"/><text x="22.0791%" y="287.50"></text></g><g><title>`0x7FFE466A16D8 (160 samples, 0.61%)</title><rect x="22.3761%" y="277" width="0.6120%" height="15" fill="rgb(230,62,27)" fg:x="5850" fg:w="160"/><text x="22.6261%" y="287.50"></text></g><g><title>`0x7FFE466A16DF (138 samples, 0.53%)</title><rect x="22.9881%" y="277" width="0.5278%" height="15" fill="rgb(216,154,8)" fg:x="6010" fg:w="138"/><text x="23.2381%" y="287.50"></text></g><g><title>`0x7FFE466A16E6 (313 samples, 1.20%)</title><rect x="23.5159%" y="277" width="1.1972%" height="15" fill="rgb(244,35,45)" fg:x="6148" fg:w="313"/><text x="23.7659%" y="287.50"></text></g><g><title>`0x7FFE466A16EA (288 samples, 1.10%)</title><rect x="24.7131%" y="277" width="1.1016%" height="15" fill="rgb(251,115,12)" fg:x="6461" fg:w="288"/><text x="24.9631%" y="287.50"></text></g><g><title>`0x7FFE466A16ED (264 samples, 1.01%)</title><rect x="25.8147%" y="277" width="1.0098%" height="15" fill="rgb(240,54,50)" fg:x="6749" fg:w="264"/><text x="26.0647%" y="287.50"></text></g><g><title>`0x7FFE466A3010 (182 samples, 0.70%)</title><rect x="26.8245%" y="277" width="0.6961%" height="15" fill="rgb(233,84,52)" fg:x="7013" fg:w="182"/><text x="27.0745%" y="287.50"></text></g><g><title>test.exe`core::ptr::drop_in_place(smallvec::IntoIter&lt;array$&lt;ref$&lt;gerber::nfa::HomoState (129 samples, 0.49%)</title><rect x="27.5245%" y="277" width="0.4934%" height="15" fill="rgb(207,117,47)" fg:x="7196" fg:w="129"/><text x="27.7745%" y="287.50"></text></g><g><title>test.exe`core::ptr::drop_in_place(smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState (129 samples, 0.49%)</title><rect x="27.5245%" y="261" width="0.4934%" height="15" fill="rgb(249,43,39)" fg:x="7196" fg:w="129"/><text x="27.7745%" y="271.50"></text></g><g><title>test.exe`smallvec::impl$33::drop(smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState (129 samples, 0.49%)</title><rect x="27.5245%" y="245" width="0.4934%" height="15" fill="rgb(209,38,44)" fg:x="7196" fg:w="129"/><text x="27.7745%" y="255.50"></text></g><g><title>test.exe`core::mem::drop(alloc::vec::Vec&lt;ref$&lt;gerber::nfa::HomoState (129 samples, 0.49%)</title><rect x="27.5245%" y="229" width="0.4934%" height="15" fill="rgb(236,212,23)" fg:x="7196" fg:w="129"/><text x="27.7745%" y="239.50"></text></g><g><title>test.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;ref$&lt;gerber::nfa::HomoState (129 samples, 0.49%)</title><rect x="27.5245%" y="213" width="0.4934%" height="15" fill="rgb(242,79,21)" fg:x="7196" fg:w="129"/><text x="27.7745%" y="223.50"></text></g><g><title>test.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;ref$&lt;gerber::nfa::HomoState (129 samples, 0.49%)</title><rect x="27.5245%" y="197" width="0.4934%" height="15" fill="rgb(211,96,35)" fg:x="7196" fg:w="129"/><text x="27.7745%" y="207.50"></text></g><g><title>test.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;ref$&lt;gerber::nfa::HomoState (129 samples, 0.49%)</title><rect x="27.5245%" y="181" width="0.4934%" height="15" fill="rgb(253,215,40)" fg:x="7196" fg:w="129"/><text x="27.7745%" y="191.50"></text></g><g><title>test.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (129 samples, 0.49%)</title><rect x="27.5245%" y="165" width="0.4934%" height="15" fill="rgb(211,81,21)" fg:x="7196" fg:w="129"/><text x="27.7745%" y="175.50"></text></g><g><title>test.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (129 samples, 0.49%)</title><rect x="27.5245%" y="149" width="0.4934%" height="15" fill="rgb(208,190,38)" fg:x="7196" fg:w="129"/><text x="27.7745%" y="159.50"></text></g><g><title>test.exe`alloc::alloc::dealloc (129 samples, 0.49%)</title><rect x="27.5245%" y="133" width="0.4934%" height="15" fill="rgb(235,213,38)" fg:x="7196" fg:w="129"/><text x="27.7745%" y="143.50"></text></g><g><title>test.exe`enum2$&lt;core::option::Option&lt;ref$&lt;smallvec::SmallVec&lt;array$&lt;core::ptr::non_null::NonNull&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,2&gt; &gt; &gt; &gt; &gt;::map(enum2$&lt;core::option::Option&lt;ref$&lt;smallvec::SmallVec&lt;array$&lt;core::ptr::non_null::NonNull&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,2&gt; &gt; &gt; &gt; &gt;, gerber::nfa::impl$1::get_transitions::closure_env$0 (248 samples, 0.95%)</title><rect x="28.0179%" y="261" width="0.9486%" height="15" fill="rgb(237,122,38)" fg:x="7325" fg:w="248"/><text x="28.2679%" y="271.50"></text></g><g><title>test.exe`gerber::nfa::impl$1::get_transitions::closure$0(gerber::nfa::impl$1::get_transitions::closure_env$0&lt;2,u8&gt;, smallvec::SmallVec&lt;array$&lt;core::ptr::non_null::NonNull&lt;gerber::nfa::HomoState (248 samples, 0.95%)</title><rect x="28.0179%" y="245" width="0.9486%" height="15" fill="rgb(244,218,35)" fg:x="7325" fg:w="248"/><text x="28.2679%" y="255.50"></text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;core::ptr::non_null::NonNull&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,2&gt; &gt;::as_slice (248 samples, 0.95%)</title><rect x="28.0179%" y="229" width="0.9486%" height="15" fill="rgb(240,68,47)" fg:x="7325" fg:w="248"/><text x="28.2679%" y="239.50"></text></g><g><title>test.exe`smallvec::impl$17::deref(smallvec::SmallVec&lt;array$&lt;core::ptr::non_null::NonNull&lt;gerber::nfa::HomoState (248 samples, 0.95%)</title><rect x="28.0179%" y="213" width="0.9486%" height="15" fill="rgb(210,16,53)" fg:x="7325" fg:w="248"/><text x="28.2679%" y="223.50"></text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;core::ptr::non_null::NonNull&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,2&gt; &gt;::triple (248 samples, 0.95%)</title><rect x="28.0179%" y="197" width="0.9486%" height="15" fill="rgb(235,124,12)" fg:x="7325" fg:w="248"/><text x="28.2679%" y="207.50"></text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;core::ptr::non_null::NonNull&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,2&gt; &gt;::spilled (16 samples, 0.06%)</title><rect x="28.9053%" y="181" width="0.0612%" height="15" fill="rgb(224,169,11)" fg:x="7557" fg:w="16"/><text x="29.1553%" y="191.50"></text></g><g><title>test.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;smallmap::Page&lt;enum2$&lt;core::option::Option&lt;u8&gt; &gt;,smallvec::SmallVec&lt;array$&lt;core::ptr::non_null::NonNull&lt;gerber::nfa::HomoState (848 samples, 3.24%)</title><rect x="60.4728%" y="245" width="3.2436%" height="15" fill="rgb(250,166,2)" fg:x="15810" fg:w="848"/><text x="60.7228%" y="255.50">tes..</text></g><g><title>test.exe`alloc::vec::Vec&lt;smallmap::Page&lt;enum2$&lt;core::option::Option&lt;u8&gt; &gt;,smallvec::SmallVec&lt;array$&lt;core::ptr::non_null::NonNull&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,2&gt; &gt; &gt;,alloc::alloc::Global&gt;::as_slice (848 samples, 3.24%)</title><rect x="60.4728%" y="229" width="3.2436%" height="15" fill="rgb(242,216,29)" fg:x="15810" fg:w="848"/><text x="60.7228%" y="239.50">tes..</text></g><g><title>test.exe`gerber::nfa::HomoState&lt;2,u8&gt;::get_transitions(enum2$&lt;core::option::Option (10,495 samples, 40.14%)</title><rect x="28.0179%" y="277" width="40.1431%" height="15" fill="rgb(230,116,27)" fg:x="7325" fg:w="10495"/><text x="28.2679%" y="287.50">test.exe`gerber::nfa::HomoState&lt;2,u8&gt;::get_transitions(enum2$&lt;core..</text></g><g><title>test.exe`smallmap::Map&lt;enum2$&lt;core::option::Option&lt;u8&gt; &gt;,smallvec::SmallVec&lt;array$&lt;core::ptr::non_null::NonNull&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,2&gt; &gt; &gt;::get(enum2$&lt;core::option::Option (10,247 samples, 39.19%)</title><rect x="28.9665%" y="261" width="39.1945%" height="15" fill="rgb(228,99,48)" fg:x="7573" fg:w="10247"/><text x="29.2165%" y="271.50">test.exe`smallmap::Map&lt;enum2$&lt;core::option::Option&lt;u8&gt; &gt;,smallve..</text></g><g><title>test.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;smallmap::Page&lt;enum2$&lt;core::option::Option&lt;u8&gt; &gt;,smallvec::SmallVec&lt;array$&lt;core::ptr::non_null::NonNull&lt;gerber::nfa::HomoState (1,162 samples, 4.44%)</title><rect x="63.7163%" y="245" width="4.4446%" height="15" fill="rgb(253,11,6)" fg:x="16658" fg:w="1162"/><text x="63.9663%" y="255.50">test...</text></g><g><title>test.exe`core::ptr::non_null::impl$13::eq(core::ptr::non_null::NonNull&lt;smallmap::Page&lt;enum2$&lt;core::option::Option&lt;u8&gt; &gt;,smallvec::SmallVec&lt;array$&lt;core::ptr::non_null::NonNull&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,2&gt; &gt; &gt; &gt;*, core::ptr::non_null::NonNull&lt;smallmap::Page&lt;enum2$&lt;core::option::Option&lt;u8&gt; &gt;,smallvec::SmallVec&lt;array$&lt;core::ptr::non_null::NonNull&lt;gerber::nfa::HomoState (1,060 samples, 4.05%)</title><rect x="64.1065%" y="229" width="4.0545%" height="15" fill="rgb(247,143,39)" fg:x="16760" fg:w="1060"/><text x="64.3565%" y="239.50">test..</text></g><g><title>test.exe`gerber::nfa::impl$0::next(gerber::nfa::HomoIter (806 samples, 3.08%)</title><rect x="68.1610%" y="277" width="3.0829%" height="15" fill="rgb(236,97,10)" fg:x="17820" fg:w="806"/><text x="68.4110%" y="287.50">tes..</text></g><g><title>test.exe`memcpy (144 samples, 0.55%)</title><rect x="71.2439%" y="277" width="0.5508%" height="15" fill="rgb(233,208,19)" fg:x="18626" fg:w="144"/><text x="71.4939%" y="287.50"></text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,32&gt; &gt;::len (409 samples, 1.56%)</title><rect x="71.7947%" y="277" width="1.5644%" height="15" fill="rgb(216,164,2)" fg:x="18770" fg:w="409"/><text x="72.0447%" y="287.50"></text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,32&gt; &gt;::triple (409 samples, 1.56%)</title><rect x="71.7947%" y="261" width="1.5644%" height="15" fill="rgb(220,129,5)" fg:x="18770" fg:w="409"/><text x="72.0447%" y="271.50"></text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,32&gt; &gt;::spilled (365 samples, 1.40%)</title><rect x="71.9630%" y="245" width="1.3961%" height="15" fill="rgb(242,17,10)" fg:x="18814" fg:w="365"/><text x="72.2130%" y="255.50"></text></g><g><title>test.exe`core::ptr::write(gerber::nfa::HomoState&lt;2,u8&gt;**, gerber::nfa::HomoState (4 samples, 0.02%)</title><rect x="76.7518%" y="261" width="0.0153%" height="15" fill="rgb(242,107,0)" fg:x="20066" fg:w="4"/><text x="77.0018%" y="271.50"></text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,32&gt; &gt;::push(gerber::nfa::HomoState (1,116 samples, 4.27%)</title><rect x="73.3591%" y="277" width="4.2687%" height="15" fill="rgb(251,28,31)" fg:x="19179" fg:w="1116"/><text x="73.6091%" y="287.50">test...</text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,32&gt; &gt;::triple_mut (225 samples, 0.86%)</title><rect x="76.7671%" y="261" width="0.8606%" height="15" fill="rgb(233,223,10)" fg:x="20070" fg:w="225"/><text x="77.0171%" y="271.50"></text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,32&gt; &gt;::spilled (66 samples, 0.25%)</title><rect x="77.3753%" y="245" width="0.2524%" height="15" fill="rgb(215,21,27)" fg:x="20229" fg:w="66"/><text x="77.6253%" y="255.50"></text></g><g><title>test.exe`smallvec::impl$26::index(smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState (449 samples, 1.72%)</title><rect x="77.6278%" y="277" width="1.7174%" height="15" fill="rgb(232,23,21)" fg:x="20295" fg:w="449"/><text x="77.8778%" y="287.50"></text></g><g><title>test.exe`smallvec::impl$17::deref(smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState (449 samples, 1.72%)</title><rect x="77.6278%" y="261" width="1.7174%" height="15" fill="rgb(244,5,23)" fg:x="20295" fg:w="449"/><text x="77.8778%" y="271.50"></text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,32&gt; &gt;::triple (449 samples, 1.72%)</title><rect x="77.6278%" y="245" width="1.7174%" height="15" fill="rgb(226,81,46)" fg:x="20295" fg:w="449"/><text x="77.8778%" y="255.50"></text></g><g><title>test.exe`smallvec::impl$44::next(smallvec::IntoIter&lt;array$&lt;ref$&lt;gerber::nfa::HomoState (1,764 samples, 6.75%)</title><rect x="79.3452%" y="277" width="6.7472%" height="15" fill="rgb(247,70,30)" fg:x="20744" fg:w="1764"/><text x="79.5952%" y="287.50">test.exe`..</text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,32&gt; &gt;::as_ptr (968 samples, 3.70%)</title><rect x="82.3898%" y="261" width="3.7026%" height="15" fill="rgb(212,68,19)" fg:x="21540" fg:w="968"/><text x="82.6398%" y="271.50">test..</text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,32&gt; &gt;::triple (609 samples, 2.33%)</title><rect x="83.7630%" y="245" width="2.3294%" height="15" fill="rgb(240,187,13)" fg:x="21899" fg:w="609"/><text x="84.0130%" y="255.50">t..</text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,32&gt; &gt;::spilled (507 samples, 1.94%)</title><rect x="84.1532%" y="229" width="1.9393%" height="15" fill="rgb(223,113,26)" fg:x="22001" fg:w="507"/><text x="84.4032%" y="239.50">t..</text></g><g><title>`0x7FFE466A13F0 (10 samples, 0.04%)</title><rect x="90.7015%" y="261" width="0.0382%" height="15" fill="rgb(206,192,2)" fg:x="23713" fg:w="10"/><text x="90.9515%" y="271.50"></text></g><g><title>`0x7FFE466A1531 (8 samples, 0.03%)</title><rect x="90.7512%" y="261" width="0.0306%" height="15" fill="rgb(241,108,4)" fg:x="23726" fg:w="8"/><text x="91.0012%" y="271.50"></text></g><g><title>`0x7FFE466A1534 (126 samples, 0.48%)</title><rect x="90.7818%" y="261" width="0.4819%" height="15" fill="rgb(247,173,49)" fg:x="23734" fg:w="126"/><text x="91.0318%" y="271.50"></text></g><g><title>`0x7FFE466A1538 (9 samples, 0.03%)</title><rect x="91.2638%" y="261" width="0.0344%" height="15" fill="rgb(224,114,35)" fg:x="23860" fg:w="9"/><text x="91.5138%" y="271.50"></text></g><g><title>`0x7FFE466A1571 (137 samples, 0.52%)</title><rect x="91.3097%" y="261" width="0.5240%" height="15" fill="rgb(245,159,27)" fg:x="23872" fg:w="137"/><text x="91.5597%" y="271.50"></text></g><g><title>`0x7FFE466A1578 (177 samples, 0.68%)</title><rect x="91.8337%" y="261" width="0.6770%" height="15" fill="rgb(245,172,44)" fg:x="24009" fg:w="177"/><text x="92.0837%" y="271.50"></text></g><g><title>`0x7FFE466A1657 (6 samples, 0.02%)</title><rect x="92.5107%" y="261" width="0.0229%" height="15" fill="rgb(236,23,11)" fg:x="24186" fg:w="6"/><text x="92.7607%" y="271.50"></text></g><g><title>`0x7FFE466A165F (4 samples, 0.02%)</title><rect x="92.5337%" y="261" width="0.0153%" height="15" fill="rgb(205,117,38)" fg:x="24192" fg:w="4"/><text x="92.7837%" y="271.50"></text></g><g><title>`0x7FFE466A1662 (102 samples, 0.39%)</title><rect x="92.5490%" y="261" width="0.3901%" height="15" fill="rgb(237,72,25)" fg:x="24196" fg:w="102"/><text x="92.7990%" y="271.50"></text></g><g><title>`0x7FFE466A166F (5 samples, 0.02%)</title><rect x="92.9468%" y="261" width="0.0191%" height="15" fill="rgb(244,70,9)" fg:x="24300" fg:w="5"/><text x="93.1968%" y="271.50"></text></g><g><title>`0x7FFE466A1679 (14 samples, 0.05%)</title><rect x="92.9659%" y="261" width="0.0535%" height="15" fill="rgb(217,125,39)" fg:x="24305" fg:w="14"/><text x="93.2159%" y="271.50"></text></g><g><title>`0x7FFE466A1683 (71 samples, 0.27%)</title><rect x="93.0194%" y="261" width="0.2716%" height="15" fill="rgb(235,36,10)" fg:x="24319" fg:w="71"/><text x="93.2694%" y="271.50"></text></g><g><title>`0x7FFE466A168D (153 samples, 0.59%)</title><rect x="93.2910%" y="261" width="0.5852%" height="15" fill="rgb(251,123,47)" fg:x="24390" fg:w="153"/><text x="93.5410%" y="271.50"></text></g><g><title>`0x7FFE466A1697 (12 samples, 0.05%)</title><rect x="93.8762%" y="261" width="0.0459%" height="15" fill="rgb(221,13,13)" fg:x="24543" fg:w="12"/><text x="94.1262%" y="271.50"></text></g><g><title>`0x7FFE466A16A1 (36 samples, 0.14%)</title><rect x="93.9221%" y="261" width="0.1377%" height="15" fill="rgb(238,131,9)" fg:x="24555" fg:w="36"/><text x="94.1721%" y="271.50"></text></g><g><title>`0x7FFE466A16AB (12 samples, 0.05%)</title><rect x="94.0598%" y="261" width="0.0459%" height="15" fill="rgb(211,50,8)" fg:x="24591" fg:w="12"/><text x="94.3098%" y="271.50"></text></g><g><title>`0x7FFE466A16B5 (142 samples, 0.54%)</title><rect x="94.1057%" y="261" width="0.5431%" height="15" fill="rgb(245,182,24)" fg:x="24603" fg:w="142"/><text x="94.3557%" y="271.50"></text></g><g><title>`0x7FFE466A16BC (9 samples, 0.03%)</title><rect x="94.6489%" y="261" width="0.0344%" height="15" fill="rgb(242,14,37)" fg:x="24745" fg:w="9"/><text x="94.8989%" y="271.50"></text></g><g><title>`0x7FFE466A16C3 (40 samples, 0.15%)</title><rect x="94.6833%" y="261" width="0.1530%" height="15" fill="rgb(246,228,12)" fg:x="24754" fg:w="40"/><text x="94.9333%" y="271.50"></text></g><g><title>`0x7FFE466A16CA (140 samples, 0.54%)</title><rect x="94.8363%" y="261" width="0.5355%" height="15" fill="rgb(213,55,15)" fg:x="24794" fg:w="140"/><text x="95.0863%" y="271.50"></text></g><g><title>`0x7FFE466A16D1 (144 samples, 0.55%)</title><rect x="95.3718%" y="261" width="0.5508%" height="15" fill="rgb(209,9,3)" fg:x="24934" fg:w="144"/><text x="95.6218%" y="271.50"></text></g><g><title>`0x7FFE466A16D8 (71 samples, 0.27%)</title><rect x="95.9226%" y="261" width="0.2716%" height="15" fill="rgb(230,59,30)" fg:x="25078" fg:w="71"/><text x="96.1726%" y="271.50"></text></g><g><title>`0x7FFE466A16DF (152 samples, 0.58%)</title><rect x="96.1942%" y="261" width="0.5814%" height="15" fill="rgb(209,121,21)" fg:x="25149" fg:w="152"/><text x="96.4442%" y="271.50"></text></g><g><title>`0x7FFE466A16E6 (75 samples, 0.29%)</title><rect x="96.7756%" y="261" width="0.2869%" height="15" fill="rgb(220,109,13)" fg:x="25301" fg:w="75"/><text x="97.0256%" y="271.50"></text></g><g><title>`0x7FFE466A16EA (142 samples, 0.54%)</title><rect x="97.0624%" y="261" width="0.5431%" height="15" fill="rgb(232,18,1)" fg:x="25376" fg:w="142"/><text x="97.3124%" y="271.50"></text></g><g><title>`0x7FFE466A16ED (265 samples, 1.01%)</title><rect x="97.6056%" y="261" width="1.0136%" height="15" fill="rgb(215,41,42)" fg:x="25518" fg:w="265"/><text x="97.8556%" y="271.50"></text></g><g><title>`0x7FFE466A3010 (137 samples, 0.52%)</title><rect x="98.6192%" y="261" width="0.5240%" height="15" fill="rgb(224,123,36)" fg:x="25783" fg:w="137"/><text x="98.8692%" y="271.50"></text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,32&gt; &gt;::len (194 samples, 0.74%)</title><rect x="99.1432%" y="261" width="0.7420%" height="15" fill="rgb(240,125,3)" fg:x="25920" fg:w="194"/><text x="99.3932%" y="271.50"></text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,32&gt; &gt;::triple (194 samples, 0.74%)</title><rect x="99.1432%" y="245" width="0.7420%" height="15" fill="rgb(205,98,50)" fg:x="25920" fg:w="194"/><text x="99.3932%" y="255.50"></text></g><g><title>test.exe`gerber::nfa::Nfa&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;::simulate_slice&lt;2,u8&gt;(ref$&lt;slice2$ (26,009 samples, 99.48%)</title><rect x="0.4246%" y="309" width="99.4836%" height="15" fill="rgb(205,185,37)" fg:x="111" fg:w="26009"/><text x="0.6746%" y="319.50">test.exe`gerber::nfa::Nfa&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;::simulate_slice&lt;2,u8&gt;(ref$&lt;slice2$</text></g><g><title>test.exe`gerber::nfa::Nfa&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;::simulate_iter(core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter (26,009 samples, 99.48%)</title><rect x="0.4246%" y="293" width="99.4836%" height="15" fill="rgb(238,207,15)" fg:x="111" fg:w="26009"/><text x="0.6746%" y="303.50">test.exe`gerber::nfa::Nfa&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;::simulate_iter(core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter</text></g><g><title>test.exe`smallvec::impl$49::into_iter(smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState (3,612 samples, 13.82%)</title><rect x="86.0924%" y="277" width="13.8158%" height="15" fill="rgb(213,199,42)" fg:x="22508" fg:w="3612"/><text x="86.3424%" y="287.50">test.exe`smallvec::im..</text></g><g><title>test.exe`smallvec::SmallVec&lt;array$&lt;ref$&lt;gerber::nfa::HomoState&lt;2,u8&gt; &gt;,32&gt; &gt;::set_len (6 samples, 0.02%)</title><rect x="99.8853%" y="261" width="0.0229%" height="15" fill="rgb(235,201,11)" fg:x="26114" fg:w="6"/><text x="100.1353%" y="271.50"></text></g><g><title>`0x7FFE4CF3CC91 (26,118 samples, 99.90%)</title><rect x="0.0115%" y="533" width="99.9006%" height="15" fill="rgb(207,46,11)" fg:x="3" fg:w="26118"/><text x="0.2615%" y="543.50">`0x7FFE4CF3CC91</text></g><g><title>`0x7FFE4C377374 (26,118 samples, 99.90%)</title><rect x="0.0115%" y="517" width="99.9006%" height="15" fill="rgb(241,35,35)" fg:x="3" fg:w="26118"/><text x="0.2615%" y="527.50">`0x7FFE4C377374</text></g><g><title>test.exe`__scrt_common_main_seh() (26,109 samples, 99.87%)</title><rect x="0.0459%" y="501" width="99.8661%" height="15" fill="rgb(243,32,47)" fg:x="12" fg:w="26109"/><text x="0.2959%" y="511.50">test.exe`__scrt_common_main_seh()</text></g><g><title>test.exe`invoke_main() (26,099 samples, 99.83%)</title><rect x="0.0841%" y="485" width="99.8279%" height="15" fill="rgb(247,202,23)" fg:x="22" fg:w="26099"/><text x="0.3341%" y="495.50">test.exe`invoke_main()</text></g><g><title>test.exe`main (26,099 samples, 99.83%)</title><rect x="0.0841%" y="469" width="99.8279%" height="15" fill="rgb(219,102,11)" fg:x="22" fg:w="26099"/><text x="0.3341%" y="479.50">test.exe`main</text></g><g><title>test.exe`std::rt::lang_start_internal (26,099 samples, 99.83%)</title><rect x="0.0841%" y="453" width="99.8279%" height="15" fill="rgb(243,110,44)" fg:x="22" fg:w="26099"/><text x="0.3341%" y="463.50">test.exe`std::rt::lang_start_internal</text></g><g><title>test.exe`std::panic::catch_unwind (26,099 samples, 99.83%)</title><rect x="0.0841%" y="437" width="99.8279%" height="15" fill="rgb(222,74,54)" fg:x="22" fg:w="26099"/><text x="0.3341%" y="447.50">test.exe`std::panic::catch_unwind</text></g><g><title>test.exe`std::panicking::try (26,099 samples, 99.83%)</title><rect x="0.0841%" y="421" width="99.8279%" height="15" fill="rgb(216,99,12)" fg:x="22" fg:w="26099"/><text x="0.3341%" y="431.50">test.exe`std::panicking::try</text></g><g><title>test.exe`std::panicking::try::do_call (26,099 samples, 99.83%)</title><rect x="0.0841%" y="405" width="99.8279%" height="15" fill="rgb(226,22,26)" fg:x="22" fg:w="26099"/><text x="0.3341%" y="415.50">test.exe`std::panicking::try::do_call</text></g><g><title>test.exe`std::rt::lang_start_internal::closure$1 (26,098 samples, 99.82%)</title><rect x="0.0880%" y="389" width="99.8241%" height="15" fill="rgb(217,163,10)" fg:x="23" fg:w="26098"/><text x="0.3380%" y="399.50">test.exe`std::rt::lang_start_internal::closure$1</text></g><g><title>test.exe`std::panic::catch_unwind (26,098 samples, 99.82%)</title><rect x="0.0880%" y="373" width="99.8241%" height="15" fill="rgb(213,25,53)" fg:x="23" fg:w="26098"/><text x="0.3380%" y="383.50">test.exe`std::panic::catch_unwind</text></g><g><title>test.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (26,098 samples, 99.82%)</title><rect x="0.0880%" y="357" width="99.8241%" height="15" fill="rgb(252,105,26)" fg:x="23" fg:w="26098"/><text x="0.3380%" y="367.50">test.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>test.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (26,098 samples, 99.82%)</title><rect x="0.0880%" y="341" width="99.8241%" height="15" fill="rgb(220,39,43)" fg:x="23" fg:w="26098"/><text x="0.3380%" y="351.50">test.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>test.exe`test::main (26,098 samples, 99.82%)</title><rect x="0.0880%" y="325" width="99.8241%" height="15" fill="rgb(229,68,48)" fg:x="23" fg:w="26098"/><text x="0.3380%" y="335.50">test.exe`test::main</text></g><g><title>`0x7FFE4CF0FB31 (5 samples, 0.02%)</title><rect x="99.9312%" y="437" width="0.0191%" height="15" fill="rgb(252,8,32)" fg:x="26126" fg:w="5"/><text x="100.1812%" y="447.50"></text></g><g><title>`0x7FFE4CF5C2ED (5 samples, 0.02%)</title><rect x="99.9312%" y="421" width="0.0191%" height="15" fill="rgb(223,20,43)" fg:x="26126" fg:w="5"/><text x="100.1812%" y="431.50"></text></g><g><title>`0x7FFE4CF04479 (5 samples, 0.02%)</title><rect x="99.9312%" y="405" width="0.0191%" height="15" fill="rgb(229,81,49)" fg:x="26126" fg:w="5"/><text x="100.1812%" y="415.50"></text></g><g><title>`0x7FFE4CF04C14 (4 samples, 0.02%)</title><rect x="99.9350%" y="389" width="0.0153%" height="15" fill="rgb(236,28,36)" fg:x="26127" fg:w="4"/><text x="100.1850%" y="399.50"></text></g><g><title>`0x7FFE4CFC37CE (9 samples, 0.03%)</title><rect x="99.9312%" y="485" width="0.0344%" height="15" fill="rgb(249,185,26)" fg:x="26126" fg:w="9"/><text x="100.1812%" y="495.50"></text></g><g><title>`0x7FFE4CF06AF4 (9 samples, 0.03%)</title><rect x="99.9312%" y="469" width="0.0344%" height="15" fill="rgb(249,174,33)" fg:x="26126" fg:w="9"/><text x="100.1812%" y="479.50"></text></g><g><title>`0x7FFE4CF073E4 (9 samples, 0.03%)</title><rect x="99.9312%" y="453" width="0.0344%" height="15" fill="rgb(233,201,37)" fg:x="26126" fg:w="9"/><text x="100.1812%" y="463.50"></text></g><g><title>`0x7FFE4CF0FBAE (4 samples, 0.02%)</title><rect x="99.9503%" y="437" width="0.0153%" height="15" fill="rgb(221,78,26)" fg:x="26131" fg:w="4"/><text x="100.2003%" y="447.50"></text></g><g><title>`0x7FFE4CF2D947 (4 samples, 0.02%)</title><rect x="99.9503%" y="421" width="0.0153%" height="15" fill="rgb(250,127,30)" fg:x="26131" fg:w="4"/><text x="100.2003%" y="431.50"></text></g><g><title>`0x7FFE4CF5D110 (4 samples, 0.02%)</title><rect x="99.9503%" y="405" width="0.0153%" height="15" fill="rgb(230,49,44)" fg:x="26131" fg:w="4"/><text x="100.2003%" y="415.50"></text></g><g><title>`0x7FFE4CF5D08A (4 samples, 0.02%)</title><rect x="99.9503%" y="389" width="0.0153%" height="15" fill="rgb(229,67,23)" fg:x="26131" fg:w="4"/><text x="100.2003%" y="399.50"></text></g><g><title>`0x7FFE4CF5D2F7 (4 samples, 0.02%)</title><rect x="99.9503%" y="373" width="0.0153%" height="15" fill="rgb(249,83,47)" fg:x="26131" fg:w="4"/><text x="100.2003%" y="383.50"></text></g><g><title>`0x7FFE4CF09A1D (4 samples, 0.02%)</title><rect x="99.9503%" y="357" width="0.0153%" height="15" fill="rgb(215,43,3)" fg:x="26131" fg:w="4"/><text x="100.2003%" y="367.50"></text></g><g><title>`0x7FFE4CFC3B6D (3 samples, 0.01%)</title><rect x="99.9732%" y="485" width="0.0115%" height="15" fill="rgb(238,154,13)" fg:x="26137" fg:w="3"/><text x="100.2232%" y="495.50"></text></g><g><title>`0x7FFE4CF65C73 (21 samples, 0.08%)</title><rect x="99.9159%" y="517" width="0.0803%" height="15" fill="rgb(219,56,2)" fg:x="26122" fg:w="21"/><text x="100.1659%" y="527.50"></text></g><g><title>`0x7FFE4CF65DEB (21 samples, 0.08%)</title><rect x="99.9159%" y="501" width="0.0803%" height="15" fill="rgb(233,0,4)" fg:x="26122" fg:w="21"/><text x="100.1659%" y="511.50"></text></g><g><title>`0x7FFE4CFC3CB2 (3 samples, 0.01%)</title><rect x="99.9847%" y="485" width="0.0115%" height="15" fill="rgb(235,30,7)" fg:x="26140" fg:w="3"/><text x="100.2347%" y="495.50"></text></g><g><title>`0x7FFE4CF5D110 (3 samples, 0.01%)</title><rect x="99.9847%" y="469" width="0.0115%" height="15" fill="rgb(250,79,13)" fg:x="26140" fg:w="3"/><text x="100.2347%" y="479.50"></text></g><g><title>`0x7FFE4CF5D110 (3 samples, 0.01%)</title><rect x="99.9847%" y="453" width="0.0115%" height="15" fill="rgb(211,146,34)" fg:x="26140" fg:w="3"/><text x="100.2347%" y="463.50"></text></g><g><title>`0x7FFE4CF5D08A (3 samples, 0.01%)</title><rect x="99.9847%" y="437" width="0.0115%" height="15" fill="rgb(228,22,38)" fg:x="26140" fg:w="3"/><text x="100.2347%" y="447.50"></text></g><g><title>`0x7FFE4CF5D2F7 (3 samples, 0.01%)</title><rect x="99.9847%" y="421" width="0.0115%" height="15" fill="rgb(235,168,5)" fg:x="26140" fg:w="3"/><text x="100.2347%" y="431.50"></text></g><g><title>`0x7FFE4CF09A1D (3 samples, 0.01%)</title><rect x="99.9847%" y="405" width="0.0115%" height="15" fill="rgb(221,155,16)" fg:x="26140" fg:w="3"/><text x="100.2347%" y="415.50"></text></g><g><title>all (26,144 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(215,215,53)" fg:x="0" fg:w="26144"/><text x="0.2500%" y="559.50"></text></g><g><title>`0x7FFE4CF65C1E (22 samples, 0.08%)</title><rect x="99.9159%" y="533" width="0.0841%" height="15" fill="rgb(223,4,10)" fg:x="26122" fg:w="22"/><text x="100.1659%" y="543.50"></text></g></svg></svg>